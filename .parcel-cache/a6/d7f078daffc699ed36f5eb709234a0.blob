"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to get private field on non-instance"); } if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = privateMap.get(receiver); if (!descriptor) { throw new TypeError("attempted to set private field on non-instance"); } if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } return value; }

var _parentElement = new WeakMap();

var _data = new WeakMap();

var _clear = new WeakSet();

var _generateMarkup = new WeakSet();

class RecipeView {
  constructor() {
    _generateMarkup.add(this);

    _clear.add(this);

    _parentElement.set(this, {
      writable: true,
      value: document.querySelector('.recipe')
    });

    _data.set(this, {
      writable: true,
      value: void 0
    });

    _defineProperty(this, "renderSpinner", function () {
      const markup = `
      <div class="spinner">
        <svg>
          <use href="${_icons.default}#icon-loader"></use>
        </svg>
      </div>
      `;
      _classPrivateFieldGet(this, _parentElement).innerHTML = '';

      _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML('afterbegin', markup);
    });
  }

  render(data) {
    _classPrivateFieldSet(this, _data, data);

    console.log(_classPrivateFieldGet(this, _data));

    const markup = _classPrivateMethodGet(this, _generateMarkup, _generateMarkup2).call(this);

    _classPrivateMethodGet(this, _clear, _clear2).call(this);

    _classPrivateFieldGet(this, _parentElement).insertAdjacentHTML('afterbegin', markup);
  }

}

var _clear2 = function _clear2() {
  _classPrivateFieldGet(this, _parentElement).innerHTML = '';
};

var _generateMarkup2 = function _generateMarkup2() {
  return `
    <figure class="recipefig">
      <img src="${_classPrivateFieldGet(this, _data).image}" alt="${_classPrivateFieldGet(this, _data).title}" class="recipeimg" />
      <h1 class="recipetitle">
        <span>${_classPrivateFieldGet(this, _data).title}</span>
      </h1>
    </figure>

    <div class="recipedetails">
      <div class="recipeinfo">
        <svg class="recipeinfo-icon">
          <use href="${_icons.default}#icon-clock"></use>
        </svg>
        <span class="recipeinfo-data recipeinfo-data--minutes">${_classPrivateFieldGet(this, _data).cookingTime}</span>
        <span class="recipeinfo-text">minutes</span>
      </div>
      <div class="recipeinfo">
        <svg class="recipeinfo-icon">
          <use href="${_icons.default}#icon-users"></use>
        </svg>
        <span class="recipeinfo-data recipeinfo-data--people">4</span>
        <span class="recipeinfo-text">${_classPrivateFieldGet(this, _data).servings}</span>

        <div class="recipeinfo-buttons">
          <button class="btn--tiny btn--increase-servings">
            <svg>
              <use href="${_icons.default}#icon-minus-circle"></use>
            </svg>
          </button>
          <button class="btn--tiny btn--increase-servings">
            <svg>
              <use href="${_icons.default}#icon-plus-circle"></use>
            </svg>
          </button>
        </div>
      </div>

      <div class="recipeuser-generated">
        <svg>
          <use href="${_icons.default}#icon-user"></use>
        </svg>
      </div>
      <button class="btn--round">
        <svg class="">
          <use href="${_icons.default}#icon-bookmark-fill"></use>
        </svg>
      </button>
    </div>

    <div class="recipeingredients">
      <h2 class="heading--2">Recipe ingredients</h2>
      <ul class="recipeingredient-list">
        ${_classPrivateFieldGet(this, _data).ingredients.map(ing => {
    return `
          <li class="recipeingredient">
            <svg class="recipeicon">
              <use href="${_icons.default}#icon-check"></use>
            </svg>
            <div class="recipequantity">${ing.quantity}</div>
            <div class="recipedescription">
              <span class="recipeunit">${ing.unit}</span>
              ${ing.description}
            </div>
          </li>
          `;
  }).join('')}
      </ul>
    </div>

    <div class="recipedirections">
      <h2 class="heading--2">How to cook it</h2>
      <p class="recipedirections-text">
        This recipe was carefully designed and tested by
        <span class="recipepublisher">${_classPrivateFieldGet(this, _data).publisher}</span>. Please check out
        directions at their website.
      </p>
      <a
        class="btn--small recipebtn"
        href="${_classPrivateFieldGet(this, _data).sourceUrl}"
        target="blank"
      >
        <span>Directions</span>
        <svg class="searchicon">
          <use href="${_icons.default}#icon-arrow-right"></use>
        </svg>
      </a>
    </div>`;
};

var _default = new RecipeView();

exports.default = _default;